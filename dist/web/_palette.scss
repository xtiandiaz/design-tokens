/* File automatically generated; DO NOT edit! */

@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
  
$light-scheme-colors: (
  'accessory': #949B9E,
  'accessory-alt': #A89C8A,
  'background': #FFFFFF,
  'background-alt': #FFFFFF,
  'blue': #3661E2,
  'body': #303436,
  'body-alt': #3B342B,
  'gray': #6C7993,
  'green': #49B234,
  'mint': #13AE95,
  'orange': #E56E19,
  'pink': #E54DB2,
  'purple': #7F4DE5,
  'red': #DD3C49,
  'secondary-background': #EFF0F0,
  'secondary-background-alt': #F2F0ED,
  'secondary-body': #555B5E,
  'secondary-body-alt': #675B4C,
  'sepia': #8F7856,
  'sky-blue': #189CDC,
  'tertiary-background': #DFE1E2,
  'tertiary-background-alt': #E5E1DC,
  'tertiary-body': #798286,
  'tertiary-body-alt': #93836C,
  'yellow': #D1AF05,
);

$dark-scheme-colors: (
  'accessory': #878E92,
  'accessory-alt': #928D87,
  'background': #1D1F20,
  'background-alt': #201F1D,
  'blue': #5781FF,
  'body': #F2F2F3,
  'body-alt': #F3F2F2,
  'gray': #B6BCC9,
  'green': #66C653,
  'mint': #0AC2A3,
  'orange': #EF8234,
  'pink': #E963BC,
  'purple': #AB57FF,
  'red': #F1505E,
  'secondary-background': #0F1010,
  'secondary-background-alt': #100F0F,
  'secondary-body': #C9CDCF,
  'secondary-body-alt': #CFCCC9,
  'sepia': #A99170,
  'sky-blue': #2BADEE,
  'tertiary-background': #000000,
  'tertiary-background-alt': #000000,
  'tertiary-body': #A1A7AA,
  'tertiary-body-alt': #AAA6A1,
  'yellow': #EEBD2B,
);

@mixin _color-attribute($attribute, $light-scheme-color, $dark-scheme-color, $inverted: false) {
  & {
    #{$attribute}: if($inverted, $dark-scheme-color, $light-scheme-color);
    
    @media (prefers-color-scheme: dark) {
      #{$attribute}: if($inverted, $light-scheme-color, $dark-scheme-color);
    }
  }
}

@mixin color-attribute($attribute, $color-alpha, $inverted: false) {
  $color-key: list.nth($color-alpha, 1);
  $alpha: if(list.length($color-alpha) > 1, list.nth($color-alpha, 2), 1);
  
  @include _color-attribute(
    $attribute, 
    rgba(map.get($light-scheme-colors, $color-key), $alpha),
    rgba(map.get($dark-scheme-colors, $color-key), $alpha),
    $inverted
  )
}
  
@mixin color-attributes($attribute-color-alpha-map, $inverted: false) {
  @each $attribute, $color-alpha in $attribute-color-alpha-map {
    $alpha: if(list.length($color-alpha) > 1, list.nth($color-alpha, 2), 1);
    
    @include color-attribute($attribute, list.nth($color-alpha, 1) $alpha, $inverted);
  }
}

@mixin mixed-color-attribute($attribute, $color-key-from, $color-key-to, $at, $alpha: 1) {
  $percentage: clamp(0, $at, 100);
  
  @include _color-attribute(
    $attribute, 
    color.mix(
      rgba(map.get($light-scheme-colors, $color-key-to), $alpha),
      rgba(map.get($light-scheme-colors, $color-key-from), $alpha),
      $percentage,
      $method: rgb
    ),
    color.mix(
      rgba(map.get($dark-scheme-colors, $color-key-to), $alpha),
      rgba(map.get($dark-scheme-colors, $color-key-from), $alpha),
      $percentage,
      $method: rgb
    ),
  )
}
